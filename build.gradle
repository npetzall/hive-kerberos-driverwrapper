plugins {
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "$distributionRepo"
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
compileJava.options.compilerArgs << "-Xlint:all"
compileTestJava.options.compilerArgs << "-Xlint:all"
compileTestJava.options.compilerArgs << "-Xlint:-processing"

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.apache.hive:hive-jdbc:$hiveVersion:standalone") {
        transitive = false
    }
    compile("org.apache.hive:hive-exec:$hiveVersion") {
        transitive = false
    }
    compile("org.apache.hadoop:hadoop-auth:$hadoopVersion") {
        transitive = true
    }
    compile("org.apache.hadoop:hadoop-common:$hadoopVersion") {
        transitive = false
    }
}

dependencies {
    testCompile "org.assertj:assertj-core:$assertjVersion"
    testCompile 'junit:junit:4.12'
    testCompile 'org.testcontainers:testcontainers:1.5.1'
}

test {
    include '**/**/*Test.class'
    exclude '**/**/*IT.class'
}

task integrationTest(type: Test) {
    group 'Verification'
    description 'run tests where driver is not on classpath, path to driver System.property driverPath'
    include '**/**/*IT.class'
    exclude '**/**/*Test.class'
    systemProperties.put("driverPath", shadowJar.archivePath.toString())
    classpath = project.sourceSets.test.runtimeClasspath - project.sourceSets.main.runtimeClasspath
}

integrationTest.dependsOn shadowJar
integrationTest.mustRunAfter test
check.dependsOn integrationTest

jacoco {
    toolVersion = "$jacocoVersion"
}

jacocoTestReport.dependsOn test

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "$gradleWrapperVersion"
}